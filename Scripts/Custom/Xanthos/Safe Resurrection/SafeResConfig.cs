#region AuthorHeader
//
//	Safe Resurrection System version 2.2, by Xanthos
//
//
#endregion AuthorHeader
using System;
using System.IO;  
using System.Xml;
using System.Text;
using System.Collections;
using System.Collections.Specialized;
using Server;
using Server.Items;
using Xanthos.Utilities;

namespace Xanthos.SafeResurrection
{
	// This file is for configuration of the Claim System.  It is advised
	// that you DO NOT edit this file, instead place SafeResConfig.xml in the 
	// RunUO/Data directory and modify the values there to configure the system
	// without changing code.  This allows you to take updates to the system
	// without losing your specific configuration settings.

	public class SafeResConfig
	{
		public static int SafeForSeconds = 60;
		public static int MessageHue = 59;
		public static int ResStoneHue = 1109;
		public static int PetResStoneHue = 2209;
		public static bool AllowSelfRes = true;
		public static bool UseSelfResStone = true;
		public static bool AllowPetRes = false;
		public static bool UsePetResStone = true;
		public static bool FullStatsOnRes = true;
		public static bool RandomDeathCry = true;
		public static bool AllowCorpseRetrieval = true;
		public static int CorpseRetrievalAmount = 3500;

		public static string[] DeathCrys = new string[]
		{
			"{0}'s death cry is heard throughout the land!",
			"Another dramatic death by {0}!",
			"{0} has died again - looks like {1}'s going for a record!",
			"Once again {0} has shown us how to die in style!",
			"{0} was taken down kicking and screaming!",
			"Looks like {0} got whomped!",
			"Dead again - that's {3} times today for {0}!",
			"{0} has just discovered another way to die!",
			"{0} has met {1} demise at the hands of {2}!",
		};

		private const string kConfigFile = @"Data/SafeResConfig.xml";
		private const string kConfigName = "SafeResurrection";

		public static void Initialize()
		{
			Element element = ConfigParser.GetConfig( kConfigFile, kConfigName );

			if ( null == element || element.ChildElements.Count <= 0 )
				return;

			bool tempBool;
			int tempInt;
			string[] tempStringArray;

			foreach( Element child in element.ChildElements ) 
			{
				if ( child.TagName == "SafeForSeconds" && child.GetIntValue( out tempInt ) )
					SafeForSeconds = tempInt;

				else if ( child.TagName == "MessageHue" && child.GetIntValue( out tempInt ) )
					MessageHue = tempInt;

				else if ( child.TagName == "ResStoneHue" && child.GetIntValue( out tempInt ) )
					ResStoneHue = tempInt;

				else if ( child.TagName == "PetResStoneHue" && child.GetIntValue( out tempInt ) )
					PetResStoneHue = tempInt;

				else if ( child.TagName == "AllowSelfRes" && child.GetBoolValue( out tempBool ) )
					AllowSelfRes = tempBool;

				else if ( child.TagName == "UseSelfResStone" && child.GetBoolValue( out tempBool ) )
					UseSelfResStone = tempBool;

				else if ( child.TagName == "AllowPetRes" && child.GetBoolValue( out tempBool ) )
					AllowPetRes = tempBool;

				else if ( child.TagName == "UsePetResStone" && child.GetBoolValue( out tempBool ) )
					UsePetResStone = tempBool;

				else if ( child.TagName == "FullStatsOnRes" && child.GetBoolValue( out tempBool ) )
					FullStatsOnRes = tempBool;

				else if ( child.TagName == "RandomDeathCry" && child.GetBoolValue( out tempBool ) )
					RandomDeathCry = tempBool;

				else if ( child.TagName == "AllowCorpseRetrieval" && child.GetBoolValue( out tempBool ) )
					AllowCorpseRetrieval = tempBool;

				else if ( child.TagName == "CorpseRetrievalAmount" && child.GetIntValue( out tempInt ) )
					CorpseRetrievalAmount = tempInt;

				else if ( child.TagName == "DeathCrys" && child.GetArray( out tempStringArray ) )
					DeathCrys = tempStringArray;
			}
		}
	}
}